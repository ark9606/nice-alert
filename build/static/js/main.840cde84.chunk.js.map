{"version":3,"sources":["strings.js","App.js","serviceWorker.js","index.js"],"names":["strings","str_0","NiceAlert","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","toClosing","onNice","bind","assertThisInitialized","e","_this2","setState","setTimeout","_this$state","niceAlert","react_default","a","createElement","className","concat","dangerouslySetInnerHTML","__html","text","onClick","Component","App","_this3","url","URL","window","location","href","id","searchParams","get","msg","str","App_NiceAlert","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAAeA,SAAA,CACXC,MAAO,2FCGLC,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAQ,EACRC,WAAW,GAEbT,EAAKU,OAASV,EAAKU,OAAOC,KAAZV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KANEA,sEASXa,GAAG,IAAAC,EAAAX,KACRA,KAAKY,SAAS,CAACN,WAAW,GAAO,WAC/BO,WAAW,WAETF,EAAKC,SAAS,CAACP,QAAQ,EAAOC,WAAW,KACxC,wCAKE,IAAAQ,EACqBd,KAAKI,MAA1BC,EADAS,EACAT,OAAQC,EADRQ,EACQR,UAEXS,EACFC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,cAAAC,OAAgBd,EAAY,UAAW,KACnDU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,KAAGG,wBAAyB,CAACC,OAAQtB,KAAKJ,MAAM2B,SAElDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBK,QAASxB,KAAKO,QAAjD,WAKN,OAAQF,EAASU,EAAY,YAlCTU,aA8ETC,cArCb,SAAAA,EAAY9B,GAAO,IAAA+B,EAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAA0B,GACjBC,EAAA7B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4B,GAAAvB,KAAAH,KAAMJ,IAGN,IAAMgC,EAAM,IAAIC,IAAIC,OAAOC,SAASC,MAC9BC,EAAKL,EAAIM,aAAaC,IAAI,MAC1BC,EAAMR,EAAIM,aAAaC,IAAI,OAE7BZ,EAAO,GARM,OASdc,EAAIJ,GACLV,EAAOc,EAAIJ,GAELG,IACNb,EAAOa,GAGTT,EAAKvB,MAAQ,CACXmB,QAjBeI,qHA2BjB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACoB,EAAD,CAAWf,KAAMvB,KAAKI,MAAMmB,eA/BlBE,aChCEc,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.840cde84.chunk.js","sourcesContent":["export default {\r\n    str_0: \"Let's go for a <strong>walk</strong> on the evening of February <strike>14</strike> 15\",\r\n    // str_0: 'Lets walk with me <strong>(14)</strong>'\r\n};","import React, { Component } from 'react';\nimport './App.scss';\nimport str from './strings';\n\nclass NiceAlert extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      isOpen: true,\n      toClosing: false\n    };\n    this.onNice = this.onNice.bind(this);\n  }\n\n  onNice(e) {\n    this.setState({toClosing: true}, () => {\n      setTimeout(() => {\n\n        this.setState({isOpen: false, toClosing: false});\n      }, 1000);\n\n    });\n  }\n\n  render() {\n    const {isOpen, toClosing} = this.state;\n\n    let niceAlert = (\n      <div className={`nice-alert ${toClosing ? 'closing': ''}`}>\n        <div className='nice-alert-inner'>\n          <div className='nice-alert-content'>\n            <p dangerouslySetInnerHTML={{__html: this.props.text}}/>\n          </div>\n          <div className=\"nice-alert-button\" onClick={this.onNice}>nice!</div>\n        </div>\n      </div>\n    );\n\n    return (isOpen ? niceAlert : null);\n  }\n}\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n\n    const url = new URL(window.location.href);\n    const id = url.searchParams.get('id');\n    const msg = url.searchParams.get('msg');\n\n    let text = '';\n    if(str[id]) {\n      text = str[id];\n    }\n    else if(msg) {\n      text = msg;\n    }\n\n    this.state = {\n      text,\n    }\n  }\n\n  componentDidMount() {\n\n    // this.setState({text});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <NiceAlert text={this.state.text}/>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}